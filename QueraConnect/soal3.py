# -*- coding: utf-8 -*-
"""QueraConnect3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AQcboHB_a7S37ycPwG7_L8kjcDgNKL6h
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('train.csv')

def feature_engineering(df):
  # replace playType values
  df['playType'] = df['playType'].replace(['جریان بازی','ضربه آزاد مستقیم','پنالتی','مستقیم از کرنر'],
                                        ['game','free','penalty','corner'])
  # replace bodyPart values 
  df['bodyPart'] = df['bodyPart'].replace(['پای راست','پای چپ','سر','سایر'],
                                          ['right','left','head','other'])
  # replace interferenceOnShooter values
  df['interferenceOnShooter'] = df['interferenceOnShooter'].replace(['متوسط','کم','زیاد'],
                                                                    [1, 0, 2])
  # replace NaN with mode in interferenceOnShooter column
  df['interferenceOnShooter'].fillna(df['interferenceOnShooter'].mode()[0], inplace=True)

  df['xy'] = df['x'] + df['y']
  df['inter'] = df['interveningOpponents'] + df['interveningTeammates'] + df['interferenceOnShooter']
  

  # replace playType values
  df['outcome'] = df['outcome'].replace(['موقعیت از دست رفته','مهار توسط دروازه بان','برخورد به دفاع','گُل','برخورد به تیردروازه','گُل به خودی'],
                                          ['fail', 'goaler', 'defender', 'goal', 'gate', 'own goal'])

  return df

df = feature_engineering(df)

df_inter = df[df['outcome'] == 'goal'].groupby('inter')['outcome'].count().sort_values(ascending=False).head()
df_type = df[df['outcome'] == 'goal'].groupby('playType')['outcome'].count().sort_values(ascending=False).head()
df_body = df[df['outcome'] == 'goal'].groupby('bodyPart')['outcome'].count().sort_values(ascending=False).head()

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10,7))
df_inter.plot(kind='bar', ax=axes[0,0], title='Distribution of interference')
df_type.plot(kind='bar', ax=axes[0,1], title='Distribution of playType')
df_body.plot(kind='bar', ax=axes[1,0], title='Distribution of bodyPart')
fig.tight_layout()

# players with most and least goal per shoot
d = {}
condition = (df.outcome == 'goal')
players = df.playerId.unique()
for player in players:
  goals  = (df[condition]['playerId'].values == player).sum()
  shoots = (df['playerId'].values == player).sum()
  d[player] = round(goals/shoots, 2)

sorted(d.items(), key=lambda x:x[1], reverse=True)[:5]

players = ['p_18', 'p_6', 'p_44', 'p_81', 'p_105']
condition = (df['playerId'].isin(players)) & (df['outcome'] == 'goal')
df1 = df[condition]

plt.scatter(x = df1['x'], y = df1['y'])